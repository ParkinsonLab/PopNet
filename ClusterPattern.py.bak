'''
Created on Apr 8, 2014

@author: Javi

This class depends on IntactClusters for now because it borrows some functions. 
I'm thinking about refactoring some common functions and reorganizing the whole thing,
but another day maybe?

For now, this script contains functions that all the occurring clustering types between a
small subset of strains in the context of the 64 genomes data. It writes to a file in a
similar format to Similarity and IntactClusters (hence the dependence), and connects to the
ClusterPatternParser on the java side. 
'''

import IntactClusters

'''(2D list of names, list of lines) -> string
turns the given clustering pattern into a string pattern representing all associations
that are present. Note that the clusters represent
all the lines of a clustering pattern. Tuples are sorted to maintain
consistency'''
def toPattern(strains, clusters):
    patterns = []
    
    for line in clusters:
        if len(line) > 1:
            for x in range(len(line)):
                patterns.append(line[x] + line[x+1:])
                
def createColorTable(patternTree):
    allPatterns = set()
    maxVal = 16777216
    
    for chrName, chr in patternTree.items():
        for pattern in chr:
            if pattern not in set:
                set.add(pattern)
    
    interval = maxVal / len(set)
    results = {}
    
    for index, pattern in enumerate(allPatterns):
        results[pattern] = interval * index
    
    return results

    
    
'''(Nested list of patterns, by Chr) -> Nested list of color values, by Chr
takes the translated tree and convert each pattern to a value'''
def calculateColor(patternTree):
    colorTable = createColorTable(patternTree)
    newTree = {}
    
    for chrName, chr in patternTree.items():
        newChr = []
        newTree[chrName] = newChr
        for pattern in chr:
            newChr.append(colorTable[pattern])
    
    return newTree

'''(Nested list of clusters, by Chr , list all intersting strains) -> Nested list of patterns, by Chr
translates the clusters into patterns'''
def translate(dataTree, strains):
    newTree = {}
    
    for chrName, chr in dataTree.items():
        newChr = []
        newTree[chrName] = newChr
        for cluster in chr:
            newChr.append(toPattern(strains, cluster))
    return newTree

if __name__ == '__main__':
    directory = 'F:\Documents\ProjectData\64Genomes\Counting' 
    filepath = 'F:\Documents\ProjectData\64Genomes\Counting\persistentResult.txt'
    tabpath = 'F:\Documents\ProjectData\64Genomes\Counting\persistentMatrix.tab'
    outpath = 'F:\Documents\ProjectData\64Genomes\Counting\pattern.txt'
    strains = ['ME49', 'RAY', 'PRU', 'ARI', 'B73', 'B41']
    import MCLCounter
    clusterTree = MCLCounter.toMatrix(MCLCounter.loadClusters(filepath, tabpath)[0])
    results = calculateColor(translate(clusterTree, strains))
    IntactClusters.write(results)